
CREATE DATABASE library;
sudo -u postgres psql library
CREATE TABLE UserTable(
EntryNumber VARCHAR(12) PRIMARY KEY,
Password varchar(1000),
FirstName CHAR(30) NOT NULL,
LastName CHAR(30),
Hosteler BOOLEAN NOT NULL,
HouseNo VARCHAR(20),
StreetNo VARCHAR(100),
City VARCHAR(20),
State VARCHAR(50),
PinCode CHAR(6),
EmailID VARCHAR(100) NOT NULL,
TypeOfUser INT DEFAULT 3,
UnreadMessages INT DEFAULT 0,
BooksContributed INT DEFAULT 0,
BooksHave INT DEFAULT 0,
Photo BYTEA
CONSTRAINT PinCode_Cons CHECK(PinCode ~ '[1-9][0-9][0-9][0-9][0-9][0-9]'),
CONSTRAINT Email_Cons CHECK(EmailID ~ '^[A-Za-z][A-Za-z]*[0-9][0-9][0-9][0-9][0-9]*@iitd.ac.in'),
CONSTRAINT UserType_Cons CHECK(TypeOfUser >0 AND TypeOfUser<4));

//For Login table
create materialized view Login as (select entrynumber, password from usertable);

CREATE TABLE ContactNumbers(
EntryNumber varchar(12) REFERENCES UserTable(EntryNumber) ON DELETE CASCADE,
MobileNumber char(10),
Type char(1)
CONSTRAINT PhoneNoCons CHECK(MobileNumber ~ '[7-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'),
CONSTRAINT TypeCons CHECK(Type ~* 'W|O|H'));


CREATE TABLE MasterBooks (
ISBN VARCHAR(13) PRIMARY KEY,
Title VARCHAR(1000) NOT NULL,
Year INT,
Publisher VARCHAR(300),
Rating decimal(6,2) DEFAULT 0
CONSTRAINT RatingCons CHECK(Rating >=0 AND Rating<6)
);

//YEAR can have 0 for books which are na, can change to 1800
update masterbooks set year=1800 where year=0;
//
COPY masterbooks from '/home/reshma/Reshma/Sem2/DataBase/Assignments/Project1/sharethybook/ShareThyBookServletApp/PhysicalFinal6.csv' with delimiter '|' csv header encoding 'latin1' quote '"';
// from works.zip

CREATE TABLE MasterBooksImages(
ISBN varchar(13) REFERENCES MasterBooks(ISBN) ON DELETE CASCADE,
Image Bytea);

CREATE TABLE Books(
BookID BIGSERIAL PRIMARY KEY,
ISBN VARCHAR(13) REFERENCES MasterBooks(ISBN) ON DELETE CASCADE ON UPDATE CASCADE,
OwnerID VARCHAR(12) REFERENCES UserTable(EntryNumber) ON DELETE CASCADE,
HolderID VARCHAR(12) REFERENCES UserTable(EntryNumber),
HoldingDate DATE NOT NULL,
LastCondition Char(1)
CONSTRAINT BookCondCons CHECK(LastCondition ~* 'D|O|G|E')
);
CREATE TABLE Authors(
AuthorID SERIAL NOT NULL UNIQUE,
AuthorName VARCHAR(1000) NOT NULL
);
Use this:COPY Authors from '/home/reshma/Reshma/Sem2/DataBase/Assignments/Project1/sharethybook/AuthorWork/AuthorFinal2.csv' with delimiter '|' csv header encoding 'latin1' quote '"';
CREATE TABLE BooksWrittenBy(
ISBN VARCHAR(13) REFERENCES MasterBooks(ISBN),
AuthorID INT REFERENCES Authors(AuthorID)
);
COPY BooksWrittenBy from '/home/reshma/Reshma/Sem2/DataBase/Assignments/Project1/sharethybook/AuthorWork/ISBNAuthor.csv' with delimiter '|' csv header encoding 'latin1' quote '"';
CREATE TABLE Transactions(
TransactionID VARCHAR(30) PRIMARY KEY,
FromID VARCHAR(12) REFERENCES UserTable(EntryNumber),
ToID VARCHAR(12) REFERENCES UserTable(EntryNumber),
BookID VARCHAR(15) REFERENCES Books(BookID),
TransStartDate TIMESTAMP,
LastUpdate TIMESTAMP,
Status CHAR(1),
BookCondition Char(1)
CONSTRAINT StatusCons CHECK(Status ~* 'R|T|H|E|C'),
CONSTRAINT BookCondCons CHECK(BookCondition ~* 'D|O|G|E')
);
CREATE TABLE WishList(
EntryNumber VARCHAR(12) REFERENCES UserTable(EntryNumber) ON DELETE CASCADE,
ISBN VARCHAR(13) REFERENCES MasterBooks(ISBN),
Date DATE
);
CREATE TABLE Messages(
MessageID BIGSERIAL PRIMARY KEY,
FromID VARCHAR(12) REFERENCES UserTable(EntryNumber),
ToID VARCHAR(12) REFERENCES UserTable(EntryNumber) ON DELETE CASCADE,
Date TIMESTAMP,
Message VARCHAR(1000) NOT NULL,
Status BOOLEAN DEFAULT FALSE
);
CREATE TABLE Rating(
ISBN VARCHAR(13) REFERENCES MasterBooks(ISBN),
EntryNumber VARCHAR(12) REFERENCES UserTable(EntryNumber),
Rating INT NOT NULL,
Review VARCHAR(1000),
Primary key (ISBN, EntryNumber),
CONSTRAINT RatingCons CHECK(Rating BETWEEN 0 AND 5)
);
Insert into UserTable Values('2010BLZ4623','facbfa7d8f7b43214453db6c205800ec','Aabheer','Acharya','true','SD7','Kumaoun','Hauz khas','New Delhi','110016','BL14623@iitd.ac.in',3,0,NULL)
==============================================================TRIGGERS===================================================================
CREATE OR REPLACE FUNCTION TriggerOnBookInsert() RETURNS TRIGGER AS $TriggerOnBookInsert$
BEGIN
UPDATE UserTable
SET BooksContributed = BooksContributed +1,
BooksHave=BooksHave+1
WHERE EntryNumber = NEW.OwnerID;
INSERT INTO Messages(FromID ,ToID ,Date,Message,Status)
SELECT 'NOREPLY',EntryNumber,now(),'This is to notify you that the book '||NEW.ISBN||' added by you in your wishlist is now available in our library',false FROM
(SELECT EntryNumber FROM WishList WHERE ISBN ILIKE NEW.ISBN) AS A;
DELETE FROM WishList WHERE ISBN ILIKE NEW.ISBN;
RETURN NULL;
END;
$TriggerOnBookInsert$ LANGUAGE plpgsql;
CREATE TRIGGER TriggerOnBookInsert AFTER INSERT ON Books
FOR EACH ROW EXECUTE PROCEDURE TriggerOnBookInsert();

//Trigger For message.......................updating NoofunRead messages of user
//Trigger for Review........................updating mastertable review

CREATE TRIGGER TriggerOnBookInsert AFTER INSERT ON Books
    FOR EACH ROW EXECUTE PROCEDURE TriggerOnBookInsert();

//Trigger For message.......................updating NoofunRead messages of user
//Trigger for Review........................updating mastertable review

CREATE OR REPLACE FUNCTION TriggerOnMessagesInsert() RETURNS TRIGGER AS $TriggerOnMessagesInsert$
    BEGIN
        UPDATE UserTable 
	SET UnreadMessages = UnreadMessages +1
        WHERE EntryNumber = NEW.ToID;
        RETURN NULL;
    END;
$TriggerOnMessagesInsert$ LANGUAGE plpgsql;

CREATE TRIGGER TriggerOnMessagesInsert AFTER INSERT ON Messages
    FOR EACH ROW EXECUTE PROCEDURE TriggerOnMessagesInsert();

CREATE OR REPLACE FUNCTION TriggerOnRatingInsert() RETURNS TRIGGER AS $TriggerOnRatingInsert$
    BEGIN
        UPDATE MasterBooks 
	SET Rating = (SELECT AVG(Rating) FROM Rating GROUP BY ISBN HAVING ISBN=NEW.ISBN)
        WHERE ISBN = NEW.ISBN;
        RETURN NULL;
    END;
$TriggerOnRatingInsert$ LANGUAGE plpgsql;

CREATE TRIGGER TriggerOnRatingInsert AFTER INSERT ON Rating
    FOR EACH ROW EXECUTE PROCEDURE TriggerOnRatingInsert();
    
CREATE OR REPLACE FUNCTION TriggerOnBookUpdate() RETURNS TRIGGER AS $TriggerOnBookUpdate$
BEGIN
UPDATE UserTable
SET BooksContributed = BooksContributed +1
WHERE EntryNumber = NEW.OwnerID;
RETURN NULL;
END;
$TriggerOnBookUpdate$ LANGUAGE plpgsql;
CREATE TRIGGER TriggerOnBookUpdate AFTER UPDATE ON Books
FOR EACH ROW EXECUTE PROCEDURE TriggerOnBookUpdate();

alter table masterbooks alter column rating set data type decimal(3,2);
